// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Form1099Status {
  NotStarted
  Submitted
  Approved
}

model ChefUser {
  id                 String    @id
  email              String    @unique
  password           String
  name               String
  zipCode            String
  phoneNumber        String?
  emailVerified      Boolean   @default(false)
  verifyToken        String?
  verifyTokenExpires DateTime?
  sessions           Session[]
  isAdmin            Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt

  // Chef specific fields
  isIdVerified                Boolean        @default(false)
  stripeVerificationSessionId String?
  stripeAccountId             String?
  stripeOnboardingComplete    Boolean        @default(false)
  stripeVerificationReportId  String?
  legalName                   String?
  form1099DocumentKey         String?
  form1099Status              Form1099Status @default(NotStarted)
  isApproved                  Boolean        @default(false)
  Recipe                      Recipe[]
}

model Session {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  chefUser   ChefUser @relation(fields: [chefUserId], references: [id], onDelete: Cascade)
  chefUserId String

  @@index([chefUserId, id])
}

model Recipe {
  id            String   @id @default(cuid())
  name          String
  description   String?
  priceRange    String // Stores PriceRange enum as string
  cuisines      String[] // Stores Cuisine enum values
  dietaryTags   String[] // Stores DietaryTags enum values
  foodAllergens String[] // Stores FoodAllergen enum values
  ingredients   Json[] // Stores IngredientDetails as JSON
  chefUserId    String
  chefUser      ChefUser @relation(fields: [chefUserId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([chefUserId])
}
