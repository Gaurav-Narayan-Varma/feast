// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Form1099Status {
  NotStarted
  Submitted
  Approved
}

model ChefUser {
  id                 String    @id
  email              String    @unique
  password           String
  name               String
  zipCode            String
  phoneNumber        String?
  emailVerified      Boolean   @default(false)
  verifyToken        String?
  verifyTokenExpires DateTime?

  sessions  Session[]
  isAdmin   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  // Chef specific fields
  isIdVerified                Boolean                 @default(false)
  stripeVerificationSessionId String?
  stripeAccountId             String?
  stripeOnboardingComplete    Boolean                 @default(false)
  stripeVerificationReportId  String?
  legalName                   String?
  form1099DocumentKey         String?
  form1099Status              Form1099Status          @default(NotStarted)
  isApproved                  Boolean                 @default(false)
  recipes                     Recipe[]
  menus                       Menu[]
  bio                         String?
  cuisines                    String[]                @default([])
  profilePictureKey           String?
  recurringAvailabilities     RecurringAvailability[]
}

model Session {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  chefUser   ChefUser @relation(fields: [chefUserId], references: [id], onDelete: Cascade)
  chefUserId String
}

model Recipe {
  id            String   @id
  name          String
  description   String
  priceRange    String
  cuisines      String[]
  dietaryTags   String[]
  foodAllergens String[]
  /// [Ingredient]
  ingredients   Json[]
  chefUser      ChefUser @relation(fields: [chefUserId], references: [id])
  chefUserId    String
  menu          Menu?    @relation(fields: [menuId], references: [id])
  menuId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Menu {
  id          String   @id
  name        String
  description String
  recipes     Recipe[]
  chefUser    ChefUser @relation(fields: [chefUserId], references: [id])
  chefUserId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RecurringAvailability {
  id         String   @id
  chefUser   ChefUser @relation(fields: [chefUserId], references: [id])
  chefUserId String
  dayOfWeek  String
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
